{"version":3,"sources":["components/StopwatchContext.js","components/StopwatchDisplay.js","observables/index.js","components/StopwatchNav.js","App.js","reportWebVitals.js","index.js"],"names":["contextProps","seconds","minutes","hours","setSeconds","setMinutes","setHours","StopwatchContext","React","createContext","StopwatchProvider","children","useState","contextValue","Provider","value","StopwatchDisplay","useContext","className","createStopwatch","setInter","sec","min","hour","Observable","observer","interval","setInterval","next","console","log","useStyles","makeStyles","theme","margin","spacing","StopwatchNav","setNewInterval","isStart","setStart","classes","clicks","stopStopwatch","clearInterval","Button","variant","color","onClick","subscribe","val","setTimeout","startIcon","Delete","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.faa9f959.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst contextProps = {\n  seconds: 0,\n  minutes: 0,\n  hours: 0,\n  setSeconds: () => {},\n  setMinutes: () => {},\n  setHours: () => {},\n}\n\nexport const StopwatchContext = React.createContext(contextProps);\n\nexport const StopwatchProvider =  ({children}) => {\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n  const [hours, setHours] = useState(0);\n\n  const contextValue = {\n    seconds,\n    minutes,\n    hours,\n    setSeconds,\n    setMinutes,\n    setHours,\n  };\n\n  return (\n    <StopwatchContext.Provider value={contextValue}>\n      {children}\n    </StopwatchContext.Provider>\n  )\n}","import React, { useContext } from 'react';\nimport { StopwatchContext } from './StopwatchContext';\n\nexport const StopwatchDisplay = () => {\n  const { seconds, minutes, hours } = useContext(StopwatchContext);\n\n  return (\n    <div className=\"display\">\n      <div className=\"hours\">{hours < 10 ? `0${hours}` : hours}</div>\n      <div>:</div>\n      <div className=\"minutes\">{minutes < 10 ? `0${minutes}` : minutes}</div>\n      <div>:</div>\n      <div className=\"seconds\">{seconds < 10 ? `0${seconds}`: seconds}</div>\n    </div>\n  );\n}\n","import { Observable } from 'rxjs';\r\n\r\nexport const createStopwatch = (setInter, sec, setMinutes, setHours) => {\r\n  sec++;\r\n  let min = 0;\r\n  let hour = 0;\r\n\r\n  return new Observable(observer => {\r\n    const interval = setInterval(() => {\r\n      if (sec <= 60) {\r\n        observer.next(sec++);\r\n      } \r\n      \r\n      if (sec === 61) {\r\n        observer.next(0);\r\n        min++\r\n        sec = 1;\r\n        setMinutes(min)\r\n        console.log(min);\r\n      }\r\n\r\n      if (min === 60) {\r\n        min = 0\r\n        hour++;\r\n        setMinutes(min);\r\n        setHours(hour);\r\n      }\r\n\r\n      if (hour === 24) {\r\n        hour = 0;\r\n        setHours(hour);\r\n      }\r\n\r\n    }, 1000);\r\n\r\n    if (setInter) {\r\n      setInter(interval);\r\n    }\r\n  });\r\n};\r\n","import React, { useContext, useState } from 'react';\nimport { StopwatchContext } from './StopwatchContext';\nimport { createStopwatch } from '../observables'\nimport { Button, makeStyles } from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\n\nconst useStyles = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nexport const StopwatchNav = () => {\n  const { seconds, setSeconds, setMinutes, setHours } = useContext(StopwatchContext);\n  const [interval, setNewInterval] = useState();\n  const [isStart, setStart] = useState(false);\n  const classes = useStyles()\n  let clicks = 0;\n\n  const customDoubleClick = () => {\n    clicks++;\n\n    setTimeout(() => clicks = 0, 300);\n\n    if (clicks === 2) {\n      clearInterval(interval);\n    }\n  };\n\n  const stopStopwatch = () => {\n    clearInterval(interval);\n    setSeconds(0);\n    setMinutes(0);\n    setHours(0);\n  };\n\n  return (\n    <>\n      {isStart ? (\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          className={classes.margin}\n          onClick={() => {\n            setStart(false);\n            stopStopwatch();\n          }}\n        >\n          Stop\n        </Button>\n      ) : (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.margin}\n          onClick={() => {\n            setStart(true);\n            createStopwatch(setNewInterval, seconds, setMinutes, setHours)\n              .subscribe(val => {setSeconds(val)});\n          }}\n        >\n          Start\n        </Button>\n      )}\n      {/* <button onClick={() => {\n        createStopwatch(setNewInterval, seconds, setMinutes, setHours)\n          .subscribe(val => {setSeconds(val)});\n        }}\n      >\n        start\n      </button> */}\n\n      {/* <button onClick={() => {\n          stopStopwatch();\n        }}\n      >\n        stop\n      </button> */}\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.margin}\n        onClick={() => customDoubleClick()}\n      >\n        Wait\n      </Button>\n\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        className={classes.margin}\n        startIcon={<Delete />}\n        onClick={() => {\n          stopStopwatch();\n          createStopwatch(setNewInterval, 0)\n            .subscribe(val => setSeconds(val));\n        }}\n      >\n        Reset\n      </Button>\n    </>\n  );\n}\n","import './App.css';\nimport { StopwatchDisplay } from './components/StopwatchDisplay';\nimport { StopwatchNav } from './components/StopwatchNav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Stopwatch</h1>\n\n      <div className=\"stopwatch\">\n        <StopwatchDisplay />\n        <StopwatchNav />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { StopwatchProvider } from './components/StopwatchContext';\n\nReactDOM.render(\n  <StopwatchProvider>\n    <App />\n  </StopwatchProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}